# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É:
# !pip install -q pyTelegramBotAPI

import os
import tempfile
import sqlite3
from datetime import datetime
from dotenv import find_dotenv, load_dotenv
load_dotenv(find_dotenv())

import telebot
from telebot import types

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã LLM (–∫–æ–¥ –æ–±—ä–µ–¥–∏–Ω—ë–Ω –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª)
from langchain_gigachat.chat_models import GigaChat
from langchain.output_parsers import PydanticOutputParser
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables import RunnableLambda
from pydantic import BaseModel, Field
import re, json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
llm = GigaChat(
    credentials=os.environ["GIGACHAT_CREDENTIALS"],
    temperature=0.1,
    verify_ssl_certs=False,
    timeout=6000,
    model="GigaChat-Max"
)

class CashbackCategory(BaseModel):
    category: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    amount: float = Field(..., description="–ü—Ä–æ—Ü–µ–Ω—Ç –∫–µ—à–±—ç–∫–∞")

class CashbackResponse(BaseModel):
    categories: list[CashbackCategory] = Field(..., description="–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–µ—à–±—ç–∫–æ–º")

class RobustParser(PydanticOutputParser):
    def parse(self, text: str) -> CashbackResponse:
        try:
            text = text.replace("'", '"').replace("\\", "")
            json_match = re.search(r'\{.*\}', text, re.DOTALL)
            if not json_match:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω JSON –≤ –æ—Ç–≤–µ—Ç–µ")
            json_str = json_match.group()
            data = json.loads(json_str)
            if "cashbacks" in data and "categories" not in data:
                data["categories"] = data.pop("cashbacks")
            return CashbackResponse(**data)
        except Exception as e:
            return CashbackResponse(categories=[])

parser = RobustParser(pydantic_object=CashbackResponse)

def _get_messages_from_url(url: str):
    return {
        "history": [
            HumanMessage(content="", additional_kwargs={"attachments": [url]}),
        ]
    }

prompt = ChatPromptTemplate.from_messages(
    [
        SystemMessage(
            content="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤—ã–¥–µ–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–µ—à–±—ç–∫–∞. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
                    "–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n"
                    "{\"categories\": ["
                    "{\"category\": \"—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã\", \"amount\": 5}, "
                    "{\"category\": \"–∞–ø—Ç–µ–∫–∏\", \"amount\": 3}"
                    "]}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π!"
        ),
        MessagesPlaceholder("history"),
    ]
)

chain = (
    RunnableLambda(_get_messages_from_url)
    | prompt
    | llm
    | RunnableLambda(lambda x: x.content)
    | parser
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("cashback.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS cashback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    bank TEXT,
    category TEXT,
    amount REAL,
    input_type TEXT,
    created_at TEXT
)
""")
conn.commit()

def save_cashback(user_id: int, bank: str, category: str, amount: float, input_type: str):
    cursor.execute("INSERT INTO cashback (user_id, bank, category, amount, input_type, created_at) VALUES (?, ?, ?, ?, ?, ?)",
                   (user_id, bank, category, amount, input_type, datetime.now().strftime("%d.%m.%Y %H:%M")))
    conn.commit()

def get_summary(user_id: int):
    cursor.execute("SELECT bank, category, amount FROM cashback WHERE user_id=?", (user_id,))
    rows = cursor.fetchall()
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    summary = {}
    for bank, category, amount in rows:
        if category not in summary:
            summary[category] = []
        summary[category].append((bank, amount))
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–≤–æ–¥–∫–∏
    text_lines = ["üèÜ –õ—É—á—à–∏–µ –∫—ç—à–±—ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:"]
    for cat, entries in summary.items():
        text_lines.append(f"\nüìã {cat}")
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∫–µ—à–±—ç–∫–∞ (—É–±—ã–≤–∞–Ω–∏–µ)
        entries.sort(key=lambda x: x[1], reverse=True)
        medals = ["ü•á", "ü•à", "ü•â"]
        for idx, (bank, amount) in enumerate(entries[:3]):
            medal = medals[idx] if idx < len(medals) else ""
            text_lines.append(f"‚îî {medal} {bank}: {int(amount)}%")
    text_lines.append(f"\nüìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {datetime.now().strftime('%d.%–º.%Y %H:%M')}")
    return "\n".join(text_lines)

def reset_data_for_bank(user_id: int, bank: str):
    cursor.execute("DELETE FROM cashback WHERE user_id=? AND bank=?", (user_id, bank))
    conn.commit()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
sessions = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ pyTelegramBotAPI
bot = telebot.TeleBot(os.environ["TELEGRAM_TOKEN"])

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏
def main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É")
    keyboard.row("–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    return keyboard

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def add_info_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–í—ã–±—Ä–∞—Ç—å –±–∞–Ω–∫")
    keyboard.row("–ù–∞–∑–∞–¥")
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def category_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    categories = ["—Å–ø–æ—Ä—Ç", "–µ–¥–∞", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–∫–∏–Ω–æ", "–∏—Å–∫—É—Å—Å—Ç–≤–æ"]
    buttons = [types.InlineKeyboardButton(text=cat.capitalize(), callback_data=f"cat_{cat}") for cat in categories]
    buttons.append(types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–π", callback_data="cat_other"))
    keyboard.add(*buttons)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
def reset_confirm_keyboard(bank: str):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"reset_{bank}"),
                 types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="reset_cancel"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–Ω–∫–∞
def add_more_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more"),
                 types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main"))
    return keyboard

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
def input_method_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–†—É—á–Ω–æ–π –≤–≤–æ–¥", "–°–∫—Ä–∏–Ω—à–æ—Ç")
    keyboard.row("–ù–∞–∑–∞–¥")
    return keyboard

@bot.message_handler(commands=["start"])
def command_start(message):
    sessions[message.from_user.id] = {}  # —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
def add_information(message):
    sessions[message.from_user.id] = {}  # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:" ‚Äì –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
    choose_bank(message)

@bot.message_handler(func=lambda m: m.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É")
def show_summary(message):
    summary = get_summary(message.from_user.id)
    bot.reply_to(message, f"–í–æ—Ç –≤–∞—à–∞ —Å–≤–æ–¥–∫–∞ –∫–µ—à–±—ç–∫–∞: \n{summary}", reply_markup=main_menu_keyboard())

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
def get_user_banks(user_id: int):
    cursor.execute("SELECT DISTINCT bank FROM cashback WHERE user_id=?", (user_id,))
    banks = [row[0] for row in cursor.fetchall() if row[0] != "–ù–µ –≤—ã–±—Ä–∞–Ω"]
    return banks

# –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –±–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤–≤–µ–¥–µ–Ω—ã
@bot.message_handler(func=lambda m: m.text == "–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def reset_data(message):
    user_id = message.from_user.id
    banks = get_user_banks(user_id)
    if not banks:
        bot.reply_to(message, "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤.", reply_markup=main_menu_keyboard())
        return
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=bank, callback_data=f"resetbank_{bank}") for bank in banks]
    markup.add(*buttons)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "–ù–∞–∑–∞–¥")
def back_to_main(message):
    bot.reply_to(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞
@bot.message_handler(func=lambda m: m.text == "–í—ã–±—Ä–∞—Ç—å –±–∞–Ω–∫")
def choose_bank(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    banks = ["OZON", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", "–Ø–Ω–¥–µ–∫—Å –±–∞–Ω–∫", "–í–¢–ë", "–ú–¢–° –±–∞–Ω–∫", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "–°–±–µ—Ä–±–∞–Ω–∫", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫"]
    buttons = [types.InlineKeyboardButton(text=bank, callback_data=f"bank_{bank}") for bank in banks]
    buttons.append(types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–π", callback_data="bank_other"))
    markup.add(*buttons)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=markup)

# –ò–∑–º–µ–Ω—è–µ–º callback_bank: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞, –∞ –Ω–µ —Å—Ä–∞–∑—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@bot.callback_query_handler(func=lambda call: call.data.startswith("bank_"))
def callback_bank(call):
    user_id = call.from_user.id
    bank = call.data.split("_", 1)[1]
    if bank == "other":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")
        sessions[user_id]["await_bank"] = True
    else:
        sessions.setdefault(user_id, {})["bank"] = bank
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
        bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {bank}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=input_method_keyboard())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cat_"))
def callback_category(call):
    user_id = call.from_user.id
    cat = call.data.split("_", 1)[1]
    if cat == "other":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        sessions[user_id]["await_category"] = True
    else:
        sessions.setdefault(user_id, {})["category"] = cat
        bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ–ª–∏—á–∏–Ω—É –∫–µ—à–±—ç–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        sessions[user_id]["stage"] = "await_cashback"
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("resetbank_"))
def callback_reset_bank(call):
    user_id = call.from_user.id
    bank = call.data.split("_", 1)[1]
    msg = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞ {bank}?"
    bot.send_message(user_id, msg, reply_markup=reset_confirm_keyboard(bank))
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("reset_"))
def callback_reset_confirm(call):
    user_id = call.from_user.id
    bank = call.data.split("_", 1)[1]
    reset_data_for_bank(user_id, bank)
    bot.send_message(user_id, f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞ {bank} —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=main_menu_keyboard())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "reset_cancel")
def callback_reset_cancel(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data in ["add_more", "back_main"])
def callback_add_more(call):
    user_id = call.from_user.id
    if call.data == "add_more":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard())
        sessions[user_id]["stage"] = "choose_category"
    else:
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
    bot.answer_callback_query(call.id)

# –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–ª–∏ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–î—Ä—É–≥–æ–π"
@bot.message_handler(func=lambda m: True, content_types=["text"])
def handle_text(message):
    user_id = message.from_user.id
    session = sessions.setdefault(user_id, {})
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
    if session.get("await_bank"):
        session["bank"] = message.text
        session.pop("await_bank")
        bot.reply_to(message, f"üëç –û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {message.text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard())
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–î—Ä—É–≥–æ–π" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    elif session.get("await_category"):
        session["category"] = message.text
        session.pop("await_category")
        bot.reply_to(message, f"üëç –ö–∞—Ç–µ–≥–æ—Ä–∏—è \"{message.text}\" –ø—Ä–∏–Ω—è—Ç–∞!\n–í–≤–µ–¥–∏—Ç–µ –≤–µ–ª–∏—á–∏–Ω—É –∫–µ—à–±—ç–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        session["stage"] = "await_cashback"
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –≤–µ–ª–∏—á–∏–Ω—ã –∫–µ—à–±—ç–∫–∞
    elif session.get("stage") == "await_cashback":
        try:
            amount = int(message.text.strip())
            bank = session.get("bank", "–ù–µ –≤—ã–±—Ä–∞–Ω")
            category = session.get("category", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
            save_cashback(user_id, bank, category, amount, input_type="manual")
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {category} ‚Äì {amount}% –¥–ª—è –±–∞–Ω–∫–∞ {bank}!", reply_markup=add_more_keyboard())
            session.pop("stage")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–µ—à–±—ç–∫–∞. ({e})")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "—Å–∫—Ä–∏–Ω—à–æ—Ç"
    elif message.text.lower() == "—Å–∫—Ä–∏–Ω—à–æ—Ç":
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–µ—à–±—ç–∫–µ. üì∑", reply_markup=input_method_keyboard())
    else:
        bot.reply_to(message, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ LLM
@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    user_id = message.from_user.id
    try:
        # –ë–µ—Ä—ë–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ (–Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞) üì∏
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
        tmp_path = tmp_file.name
        tmp_file.close()
        downloaded_file = bot.download_file(file_info.file_path)
        with open(tmp_path, "wb") as new_file:
            new_file.write(downloaded_file)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ü§ñ
        with open(tmp_path, "rb") as f:
            uploaded_file = llm.upload_file(f)
        result = chain.batch([uploaded_file.id_])
        if result and result[0].categories:  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–µ —É—Å–ª–æ–≤–∏–µ
            bank = sessions.get(user_id, {}).get("bank", "–ù–µ –≤—ã–±—Ä–∞–Ω")
            for cat in result[0].categories:
                save_cashback(user_id, bank, cat.category, int(cat.amount), input_type="screenshot")
            response_text = "\n".join(f"{cat.category.capitalize()}: {int(cat.amount)}% üí∞" for cat in result[0].categories)
        else:
            response_text = "üôÅ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–µ—à–±—ç–∫ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        bot.reply_to(message, f"–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n{response_text}", reply_markup=add_info_keyboard())
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é! ({e})")
    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)

if __name__ == "__main__":
    bot.polling(none_stop=True)
