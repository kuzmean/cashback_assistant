import os
import tempfile
import sqlite3
from datetime import datetime
from dotenv import find_dotenv, load_dotenv
load_dotenv(find_dotenv())

import telebot
from telebot import types

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã LLM (–∫–æ–¥ –æ–±—ä–µ–¥–∏–Ω—ë–Ω –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª)
from langchain_gigachat.chat_models import GigaChat
from langchain.output_parsers import PydanticOutputParser
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables import RunnableLambda
from pydantic import BaseModel, Field
import re, json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
llm = GigaChat(
    credentials=os.environ["GIGACHAT_CREDENTIALS"],
    temperature=0.1,
    verify_ssl_certs=False,
    timeout=6000,
    model="GigaChat-Max"
)

class CashbackCategory(BaseModel):
    category: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    amount: float = Field(..., description="–ü—Ä–æ—Ü–µ–Ω—Ç –∫–µ—à–±—ç–∫–∞")

class CashbackResponse(BaseModel):
    categories: list[CashbackCategory] = Field(..., description="–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–µ—à–±—ç–∫–æ–º")

class RobustParser(PydanticOutputParser):
    def parse(self, text: str) -> CashbackResponse:
        try:
            text = text.replace("'", '"').replace("\\", "")
            json_match = re.search(r'\{.*\}', text, re.DOTALL)
            if not json_match:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω JSON –≤ –æ—Ç–≤–µ—Ç–µ")
            json_str = json_match.group()
            data = json.loads(json_str)
            if "cashbacks" in data and "categories" not in data:
                data["categories"] = data.pop("cashbacks")
            return CashbackResponse(**data)
        except Exception as e:
            return CashbackResponse(categories=[])

parser = RobustParser(pydantic_object=CashbackResponse)

def _get_messages_from_url(url: str):
    return {
        "history": [
            HumanMessage(content="", additional_kwargs={"attachments": [url]}),
        ]
    }

prompt = ChatPromptTemplate.from_messages(
    [
        SystemMessage(
            content="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤—ã–¥–µ–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–µ—à–±—ç–∫–∞. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
                    "–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n"
                    "{\"categories\": ["
                    "{\"category\": \"—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã\", \"amount\": 5}, "
                    "{\"category\": \"–∞–ø—Ç–µ–∫–∏\", \"amount\": 3}"
                    "]}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π!"
        ),
        MessagesPlaceholder("history"),
    ]
)

chain = (
    RunnableLambda(_get_messages_from_url)
    | prompt
    | llm
    | RunnableLambda(lambda x: x.content)
    | parser
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("cashback.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS cashback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    bank TEXT,
    category TEXT,
    amount REAL,
    input_type TEXT,
    created_at TEXT
)
""")
conn.commit()

def save_cashback(user_id: int, bank: str, category: str, amount: float, input_type: str):
    cursor.execute("INSERT INTO cashback (user_id, bank, category, amount, input_type, created_at) VALUES (?, ?, ?, ?, ?, ?)",
                   (user_id, bank, category, amount, input_type, datetime.now().strftime("%d.%m.%Y %H:%M")))
    conn.commit()

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å —ç–º–æ–¥–∑–∏
def get_summary(user_id):
    rows = cursor.execute("SELECT bank, category, amount FROM cashback WHERE user_id=?", (user_id,)).fetchall()
    summary = {}
    
    for bank, category, amount in rows:
        if category not in summary:
            summary[category] = []
        summary[category].append((bank, amount))
    
    text_lines = ["üèÜ –õ—É—á—à–∏–µ –∫—ç—à–±—ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:"]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for cat in sorted(summary.keys(), key=str.lower):
        entries = summary[cat]
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ (—Å —É—á–µ—Ç–æ–º –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        if cat.lower() in category_emojis:
            cat_label = f"{category_emojis[cat.lower()]} {cat.capitalize()}"
        else:
            cat_label = f"{default_category_emoji} {cat.capitalize()}"
        text_lines.append(f"\n {cat_label}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫—ç—à–±—ç–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∞–ª–∏
        entries.sort(key=lambda x: x[1], reverse=True)
        medals = ["ü•á", "ü•à", "ü•â"]
        
        for idx, (bank, amount) in enumerate(entries[:3]):
            medal = medals[idx] if idx < len(medals) else ""
            # –í—ã–¥–µ–ª—è–µ–º –∂–∏—Ä–Ω—ã–º –ø–µ—Ä–≤—ã–π (–ª—É—á—à–∏–π) –≤–∞—Ä–∏–∞–Ω—Ç
            if idx == 0:
                text_lines.append(f"‚îî {medal} *{bank}: {int(amount)}%*")
            else:
                text_lines.append(f"‚îî {medal} {bank}: {int(amount)}%")
    
    text_lines.append(f"\nüìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    return "\n".join(text_lines)

def reset_data_for_bank(user_id: int, bank: str):
    cursor.execute("DELETE FROM cashback WHERE user_id=? AND bank=?", (user_id, bank))
    conn.commit()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
sessions = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ pyTelegramBotAPI
bot = telebot.TeleBot(os.environ["TELEGRAM_TOKEN"])

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —ç–º–æ–¥–∑–∏
def main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É
    keyboard.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì —Å–±—Ä–æ—Å –ø–æ –±–∞–Ω–∫–∞–º –∏ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard.row("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É")
    return keyboard

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def add_info_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–í—ã–±—Ä–∞—Ç—å –±–∞–Ω–∫")
    keyboard.row("–ù–∞–∑–∞–¥")
    return keyboard

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∏—Ö —ç–º–æ–¥–∑–∏
default_categories = ["–æ–¥–µ–∂–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—Ç–µ—Ö–Ω–∏–∫–∞", "—Ç–∞–∫—Å–∏"]
category_emojis = {
    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –∞–≤—Ç–æ
    "–∞–≤—Ç–æ": "üöó",
    "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏": "üîß",
    "–∞–≤—Ç–æ—É—Å–ª—É–≥–∏": "üõ†Ô∏è",
    "—Ç–æ–ø–ª–∏–≤–æ": "‚õΩ",
    "—Ç–æ–ø–ª–∏–≤–æ –∏ –∞–∑—Å": "‚õΩ",
    "—Ç–∞–∫—Å–∏": "üöñ",
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "üöá",
    "–∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ": "üöô",
    "–ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ": "üèéÔ∏è",
    
    # –ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏
    "–ø—Ä–æ–¥—É–∫—Ç—ã": "üõí",
    "—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã": "üè™",
    "–∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": "üçΩÔ∏è",
    "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": "üçΩÔ∏è",
    "–∫–∞—Ñ–µ": "üçΩÔ∏è",
    "—Ñ–∞—Å—Ç—Ñ—É–¥": "üçî",
    "–∞–ª–∫–æ–≥–æ–ª—å": "üç∑",
    "–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã": "üõµ",
    
    # –ó–¥–æ—Ä–æ–≤—å–µ
    "–∞–ø—Ç–µ–∫–∏": "üíä",
    "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏": "üè•",
    "—Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è": "ü©∫",
    "–∫—Ä–∞—Å–æ—Ç–∞": "üíÑ",
    
    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Ö–æ–±–±–∏
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "üéì",
    "—Ö–æ–±–±–∏": "üß©",
    "–∫—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ": "üé≠",
    "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã": "üèãÔ∏è",
    "–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö": "üé¢",
    "—Å–ø–æ—Ä—Ç": "üèãÔ∏è",
    "—Å–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã": "üèãÔ∏è",
    "–∫–∏–Ω–æ": "üé¨",
    "–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã": "üé¨",

    
    # –¢–µ—Ö–Ω–∏–∫–∞ –∏ —Å–≤—è–∑—å
    "—Ç–µ—Ö–Ω–∏–∫–∞": "üì±",
    "—Å–≤—è–∑—å, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Ç–≤": "üì°",
    "—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã": "üíª",
    
    # –î–æ–º –∏ –±—ã—Ç
    "–¥–æ–º –∏ —Ä–µ–º–æ–Ω—Ç": "üè°",
    "–º–µ–±–µ–ª—å": "ü™ë",
    "—Ü–≤–µ—Ç—ã": "ÔøΩÔøΩ",
    # –®–æ–ø–∏–Ω–≥
    "–æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å": "üë†",
    "–¥–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã": "üß∏",
    "—é–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è": "ÔøΩÔøΩ",
    "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã": "üì¶",

    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    "—Å–µ—Ä–≤–∏—Å —Ç—Ä–µ–≤–µ–ª": "‚úàÔ∏è",
    "—Å–µ—Ä–≤–∏—Å –∑–∞–ø—Ä–∞–≤–∫–∏": "‚õΩ",
    "—Å–µ—Ä–≤–∏—Å –º–∞—Ä–∫–µ—Ç": "üõçÔ∏è",
    "—Å–µ—Ä–≤–∏—Å –∞—Ñ–∏—à–∞": "üéüÔ∏è",
    "—á–µ—Ä–µ–∑ alfa pay": "üì≤",  # "Alfa Pay" –æ—Å—Ç–∞–≤–ª–µ–Ω —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±—Ä–µ–Ω–¥
    
    # –ñ–∏–≤–æ—Ç–Ω—ã–µ
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": "üêæ",
}
default_category_emoji = "üìã"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_categories(user_id: int):
    cursor.execute("SELECT DISTINCT category FROM cashback WHERE user_id=?", (user_id,))
    cats = [row[0] for row in cursor.fetchall()]
    # –í–µ—Ä–Ω—É—Ç—å —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ default_categories
    return list(set(c for c in cats if c not in default_categories))

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–∞–Ω–∫–æ–≤ —Å —É—á—ë—Ç–æ–º –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def bank_keyboard(user_id: int):
    default_banks = ["OZON", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", "–Ø–Ω–¥–µ–∫—Å –±–∞–Ω–∫", "–í–¢–ë", "–ú–¢–° –±–∞–Ω–∫", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "–°–±–µ—Ä–±–∞–Ω–∫", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫"]
    user_banks = get_user_banks(user_id)
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    banks = list(set(default_banks + user_banks))
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=bank, callback_data=f"bank_{bank}") for bank in banks]
    buttons.append(types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–π", callback_data="bank_other"))
    markup.add(*buttons)
    return markup

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è category_keyboard —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
def category_keyboard(user_id: int):
    default_cats = ["–æ–¥–µ–∂–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—Ç–µ—Ö–Ω–∏–∫–∞", "—Ç–∞–∫—Å–∏"]
    cursor.execute("SELECT DISTINCT category FROM cashback WHERE user_id=?", (user_id,))
    user_cats = [row[0] for row in cursor.fetchall()]
    all_cats = list(set(default_cats + user_cats))
    
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    for cat in all_cats:
        text = cat.capitalize()
        buttons.append(types.InlineKeyboardButton(text=text, callback_data=f"cat_{cat}"))
    
    buttons.append(types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–π", callback_data="cat_other"))
    markup.add(*buttons)
    return markup

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å —ç–º–æ–¥–∑–∏
def reset_confirm_keyboard(bank: str):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"reset_{bank}"),
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="reset_cancel")
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–Ω–∫–∞
def add_more_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more"),
                 types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main"))
    return keyboard

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
def input_method_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚úçÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥", "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")
    keyboard.row("üîô –ù–∞–∑–∞–¥")
    return keyboard

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def command_start(message):
    sessions[message.from_user.id] = {}  # —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    welcome_text = (
        "Welcome to Cashback Assistant! ü§ë\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–±—ç–∫–µ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"
    )
    bot.reply_to(message, welcome_text, reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda m: "–¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" in m.text.lower())
def add_information(message):
    sessions[message.from_user.id] = {}  # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    choose_bank(message)

@bot.message_handler(func=lambda m: "–ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É" in m.text.lower())
def show_summary(message):
    summary = get_summary(message.from_user.id)
    bot.reply_to(message, f"\n{summary}", reply_markup=main_menu_keyboard(), parse_mode="Markdown")
    offer_msg = (
        "üí≥ –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à—É –≤—ã–≥–æ–¥—É, –æ—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É:\n"
        "–ê–ª—å—Ñ–∞-–±–∞–Ω–∫: https://alfa.me/xGH5KO\n"
        "–¢-–±–∞–Ω–∫: https://www.tbank.ru/baf/4HLAiOHJMyt"
    )
    bot.send_message(message.from_user.id, offer_msg, reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda m: "—Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" in m.text.lower())
def reset_data(message):
    user_id = message.from_user.id
    banks = get_user_banks(user_id)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –±–∞–Ω–∫–∏, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –∫–Ω–æ–ø–∫–∏
    if banks:
        buttons = [types.InlineKeyboardButton(text=bank, callback_data=f"resetbank_{bank}") for bank in banks]
        keyboard.add(*buttons)
    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="reset_all"))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±—Ä–æ—Å: –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)

@bot.message_handler(func=lambda m: "–Ω–∞–∑–∞–¥" in m.text.lower())
def back_to_main(message):
    bot.reply_to(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
def get_user_banks(user_id: int):
    cursor.execute("SELECT DISTINCT bank FROM cashback WHERE user_id=?", (user_id,))
    banks = [row[0] for row in cursor.fetchall() if row[0] != "–ù–µ –≤—ã–±—Ä–∞–Ω"]
    return banks

# –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –±–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤–≤–µ–¥–µ–Ω—ã
@bot.message_handler(func=lambda m: m.text == "–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def reset_data(message):
    user_id = message.from_user.id
    banks = get_user_banks(user_id)
    if not banks:
        bot.reply_to(message, "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤.", reply_markup=main_menu_keyboard())
        return
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=bank, callback_data=f"resetbank_{bank}") for bank in banks]
    markup.add(*buttons)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=markup)

@bot.message_handler(func=lambda m: "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥" in m.text.lower())
def manual_input(message):
    user_id = message.from_user.id
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—ã–±—Ä–∞–Ω –±–∞–Ω–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if user_id in sessions and "bank" in sessions[user_id]:
        bank = sessions[user_id]["bank"]
        markup = category_keyboard(user_id)
        bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {bank}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    else:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫", reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda m: "—Å–∫—Ä–∏–Ω—à–æ—Ç" in m.text.lower())
def screenshot_input(message):
    user_id = message.from_user.id
    if user_id in sessions and "bank" in sessions[user_id]:
        bank = sessions[user_id]["bank"]
        bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {bank}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–µ—à–±—ç–∫–µ:")
    else:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫", reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞
@bot.message_handler(func=lambda m: m.text == "–í—ã–±—Ä–∞—Ç—å –±–∞–Ω–∫")
def choose_bank(message):
    user_id = message.from_user.id
    markup = bank_keyboard(user_id)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=markup)

# –ò–∑–º–µ–Ω—è–µ–º callback_bank: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞, –∞ –Ω–µ —Å—Ä–∞–∑—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@bot.callback_query_handler(func=lambda call: call.data.startswith("bank_"))
def callback_bank(call):
    user_id = call.from_user.id
    bank = call.data.split("_", 1)[1]
    if bank == "other":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")
        sessions[user_id]["await_bank"] = True
    else:
        sessions.setdefault(user_id, {})["bank"] = bank
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
        bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {bank}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=input_method_keyboard())
    bot.answer_callback_query(call.id)

# –í callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äì –ø–µ—Ä–µ–¥–∞–µ–º user_id –≤ category_keyboard
@bot.callback_query_handler(func=lambda call: call.data.startswith("cat_"))
def callback_category(call):
    user_id = call.from_user.id
    cat = call.data.split("_", 1)[1]
    if cat == "other":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        sessions[user_id]["await_category"] = True
    else:
        sessions.setdefault(user_id, {})["category"] = cat
        bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ–ª–∏—á–∏–Ω—É –∫–µ—à–±—ç–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        sessions[user_id]["stage"] = "await_cashback"
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("resetbank_"))
def callback_reset_bank(call):
    user_id = call.from_user.id
    bank = call.data.split("_", 1)[1]
    msg = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞ {bank}?"
    bot.send_message(user_id, msg, reply_markup=reset_confirm_keyboard(bank))
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "reset_all")
def callback_reset_all(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?", reply_markup=full_reset_confirm_keyboard())
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
@bot.callback_query_handler(func=lambda call: call.data == "reset_all_confirm")
def callback_reset_all_confirm(call):
    user_id = call.from_user.id
    cursor.execute("DELETE FROM cashback WHERE user_id=?", (user_id,))
    conn.commit()
    bot.send_message(user_id, "‚úÖ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω.", reply_markup=main_menu_keyboard())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "reset_cancel")
def callback_reset_cancel(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
    bot.answer_callback_query(call.id)

# –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ callback_add_more –∏ handle_text –ø–µ—Ä–µ–¥–∞–µ–º user_id
@bot.callback_query_handler(func=lambda call: call.data in ["add_more", "back_main"])
def callback_add_more(call):
    user_id = call.from_user.id
    if call.data == "add_more":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard(user_id))
        sessions[user_id]["stage"] = "choose_category"
    else:
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
    bot.answer_callback_query(call.id)

# –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–ª–∏ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–î—Ä—É–≥–æ–π"
@bot.message_handler(func=lambda m: True, content_types=["text"])
def handle_text(message):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/', –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∑–¥–µ—Å—å
    if message.text.startswith('/'):
        return
    user_id = message.from_user.id
    session = sessions.setdefault(user_id, {})
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–≤ —Ç–æ–º —á–∏—Å–ª–µ "–î—Ä—É–≥–æ–π")
    if session.get("await_bank"):
        session["bank"] = message.text
        session.pop("await_bank")
        # –ò–∑–º–µ–Ω–µ–Ω–æ: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞, –∞ –Ω–µ —Å—Ä–∞–∑—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        bot.reply_to(message, f"üëç –û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=input_method_keyboard())
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–î—Ä—É–≥–æ–π" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    elif session.get("await_category"):
        session["category"] = message.text
        session.pop("await_category")
        bot.reply_to(message, f"üëç –ö–∞—Ç–µ–≥–æ—Ä–∏—è \"{message.text}\" –ø—Ä–∏–Ω—è—Ç–∞!\n–í–≤–µ–¥–∏—Ç–µ –≤–µ–ª–∏—á–∏–Ω—É –∫–µ—à–±—ç–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        session["stage"] = "await_cashback"
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –≤–µ–ª–∏—á–∏–Ω—ã –∫–µ—à–±—ç–∫–∞
    elif session.get("stage") == "await_cashback":
        try:
            amount = int(message.text.strip())
            bank = session.get("bank", "–ù–µ –≤—ã–±—Ä–∞–Ω")
            category = session.get("category", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
            save_cashback(user_id, bank, category, amount, input_type="manual")
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {category} ‚Äì {amount}% –¥–ª—è –±–∞–Ω–∫–∞ {bank}!", reply_markup=add_more_keyboard())
            session.pop("stage")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–µ—à–±—ç–∫–∞. ({e})")
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "—Å–∫—Ä–∏–Ω—à–æ—Ç"
    elif message.text.lower() == "—Å–∫—Ä–∏–Ω—à–æ—Ç":
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–µ—à–±—ç–∫–µ. üì∑", reply_markup=input_method_keyboard())
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É –¥–ª—è "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥"
    elif message.text.lower() == "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥":
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞:", reply_markup=category_keyboard(user_id))
    else:
        bot.reply_to(message, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu_keyboard())

# –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
def screenshot_confirm_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm_screenshot"),
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_screenshot")
    )
    return markup

# –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    user_id = message.from_user.id
    try:
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
        tmp_path = tmp_file.name
        tmp_file.close()
        downloaded_file = bot.download_file(file_info.file_path)
        with open(tmp_path, "wb") as new_file:
            new_file.write(downloaded_file)
        with open(tmp_path, "rb") as f:
            uploaded_file = llm.upload_file(f)
        result = chain.batch([uploaded_file.id_])
        if result and result[0].categories:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            sessions[user_id]["screenshot"] = result[0].categories
            response = "\n".join(f"{cat.category.capitalize()}: {int(cat.amount)}% üí∞" for cat in result[0].categories)
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            bot.reply_to(message,
                         f"–Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ –∫–µ—à–±—ç–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{response}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:",
                         reply_markup=screenshot_confirm_keyboard())
        else:
            bot.reply_to(message, "üôÅ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–µ—à–±—ç–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.",
                         reply_markup=input_method_keyboard())
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é! ({e})")
    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è / –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == "confirm_screenshot")
def confirm_screenshot(call):
    user_id = call.from_user.id
    categories = sessions.get(user_id, {}).get("screenshot")
    bank = sessions.get(user_id, {}).get("bank", "–ù–µ –≤—ã–±—Ä–∞–Ω")
    if categories:
        for cat in categories:
            save_cashback(user_id, bank, cat.category, int(cat.amount), input_type="screenshot")
        response = "\n".join(f"{cat.category.capitalize()}: {int(cat.amount)}% üí∞" for cat in categories)
        bot.send_message(user_id, f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n{response}", reply_markup=main_menu_keyboard())
        sessions[user_id].pop("screenshot", None)
    else:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=main_menu_keyboard())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_screenshot")
def cancel_screenshot(call):
    user_id = call.from_user.id
    sessions[user_id].pop("screenshot", None)
    bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.", reply_markup=input_method_keyboard())
    bot.answer_callback_query(call.id)

# –ù–æ–≤–∞—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
def full_reset_confirm_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="reset_all_confirm"),
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="reset_cancel")
    )
    return keyboard

@bot.message_handler(commands=["offer"])
def card_links(message):
    links_text = (
        "üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç:\n"
        "–ê–ª—å—Ñ–∞-–±–∞–Ω–∫: https://alfa.me/xGH5KO\n"
        "–¢-–±–∞–Ω–∫: https://www.tbank.ru/baf/4HLAiOHJMyt"
    )
    bot.reply_to(message, links_text, reply_markup=main_menu_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("reset_") and call.data not in ["reset_all", "reset_all_confirm", "reset_cancel"])
def callback_reset_bank_confirm(call):
    user_id = call.from_user.id
    bank = call.data.split("_", 1)[1]
    reset_data_for_bank(user_id, bank)
    bot.send_message(user_id, f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞ {bank} —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=main_menu_keyboard())
    bot.answer_callback_query(call.id)

if __name__ == "__main__":
    bot.polling(none_stop=True)
