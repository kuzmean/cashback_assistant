import os
import tempfile
import logging
from telebot import TeleBot
from telebot import types

from .config import CARD_LINKS
from .database import save_cashback, reset_data_for_bank, reset_all_data
from .api import analyze_image
from .keyboards import (
    main_menu_keyboard, add_info_keyboard, input_method_keyboard,
    bank_keyboard, category_keyboard, reset_confirm_keyboard,
    full_reset_confirm_keyboard, add_more_keyboard, screenshot_confirm_keyboard
)
from .utils import format_summary, save_temp_file, delete_temp_file

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
sessions = {}

def register_handlers(bot: TeleBot):
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    @bot.message_handler(commands=["start"])
    def command_start(message):
        sessions[message.from_user.id] = {}  # —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
        welcome_text = (
            "Welcome to Cashback Assistant! ü§ë\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–±—ç–∫–µ.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"
        )
        bot.reply_to(message, welcome_text, reply_markup=main_menu_keyboard())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /offer
    @bot.message_handler(commands=["offer"])
    def card_links(message):
        links_text = "üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç:\n"
        for bank, link in CARD_LINKS.items():
            links_text += f"{bank}: {link}\n"
        bot.reply_to(message, links_text, reply_markup=main_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    @bot.message_handler(func=lambda m: "–¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" in m.text.lower())
    def add_information(message):
        sessions[message.from_user.id] = {}  # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        user_id = message.from_user.id
        markup = bank_keyboard(user_id)
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=markup)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–∫–∏
    @bot.message_handler(func=lambda m: "–ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É" in m.text.lower())
    def show_summary(message):
        summary = format_summary(message.from_user.id)
        bot.reply_to(message, f"\n{summary}", reply_markup=main_menu_keyboard())
        
        offer_msg = "üí≥ –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à—É –≤—ã–≥–æ–¥—É, –æ—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É:\n"
        for bank, link in CARD_LINKS.items():
            offer_msg += f"{bank}: {link}\n"
        bot.send_message(message.from_user.id, offer_msg, reply_markup=main_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    @bot.message_handler(func=lambda m: "—Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" in m.text.lower())
    def reset_data(message):
        from .database import get_user_banks
        user_id = message.from_user.id
        banks = get_user_banks(user_id)
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –±–∞–Ω–∫–∏, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –∫–Ω–æ–ø–∫–∏
        if banks:
            buttons = [types.InlineKeyboardButton(text=bank, callback_data=f"resetbank_{bank}") for bank in banks]
            keyboard.add(*buttons)
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="reset_all"))
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±—Ä–æ—Å: –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @bot.message_handler(func=lambda m: m.text == "–ù–∞–∑–∞–¥")
    def back_to_main(message):
        bot.reply_to(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
    @bot.message_handler(func=lambda m: m.text in ["–†—É—á–Ω–æ–π –≤–≤–æ–¥", "–°–∫—Ä–∏–Ω—à–æ—Ç"])
    def handle_input_method(message):
        user_id = message.from_user.id
        if user_id not in sessions or "bank" not in sessions[user_id]:
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫", reply_markup=main_menu_keyboard())
            return
        
        if message.text == "–†—É—á–Ω–æ–π –≤–≤–æ–¥":
            markup = category_keyboard(user_id)
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        else:  # "–°–∫—Ä–∏–Ω—à–æ—Ç"
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∫—ç—à–±—ç–∫–∞:", reply_markup=types.ReplyKeyboardRemove())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    @bot.message_handler(content_types=["photo"])
    def handle_photo(message):
        user_id = message.from_user.id
        if user_id not in sessions or "bank" not in sessions[user_id]:
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏ –º–µ—Ç–æ–¥ –≤–≤–æ–¥–∞", reply_markup=main_menu_keyboard())
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            file_info = bot.get_file(message.photo[-1].file_id)
            file_data = bot.download_file(file_info.file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = save_temp_file(file_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑
            bot.send_message(user_id, "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            categories = analyze_image(temp_file)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            delete_temp_file(temp_file)
            
            if not categories:
                bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫—ç—à–±—ç–∫–µ")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—Å–∏—é
                sessions[user_id]["screenshot"] = categories
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                response = "‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
                for cat in categories:
                    response += f"‚ñ™Ô∏è {cat.category.capitalize()}: {int(cat.amount)}%\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                bot.reply_to(message, response, reply_markup=screenshot_confirm_keyboard())
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    @bot.message_handler(func=lambda m: True)
    def handle_text(message):
        user_id = message.from_user.id
        sessions.setdefault(user_id, {})
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±–∞–Ω–∫–∞
        if sessions[user_id].get("await_bank", False):
            sessions[user_id]["bank"] = message.text
            sessions[user_id]["await_bank"] = False
            bot.reply_to(message, f"–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=input_method_keyboard())
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if sessions[user_id].get("await_category", False):
            sessions[user_id]["category"] = message.text
            sessions[user_id]["await_category"] = False
            sessions[user_id]["stage"] = "await_cashback"
            bot.reply_to(message, f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ–ª–∏—á–∏–Ω—É –∫–µ—à–±—ç–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫—ç—à–±—ç–∫–∞
        if sessions[user_id].get("stage") == "await_cashback":
            try:
                amount = float(message.text.replace(',', '.').strip('%'))
                bank = sessions[user_id]["bank"]
                category = sessions[user_id]["category"]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                save_cashback(user_id, bank, category, amount)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.reply_to(message, f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {category.capitalize()} - {int(amount)}%", reply_markup=add_more_keyboard())
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                sessions[user_id]["stage"] = None
            except ValueError:
                bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞
    @bot.callback_query_handler(func=lambda call: call.data.startswith("bank_"))
    def callback_bank(call):
        user_id = call.from_user.id
        bank = call.data.split("_", 1)[1]
        if bank == "other":
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")
            sessions[user_id] = {"await_bank": True}
        else:
            sessions.setdefault(user_id, {})["bank"] = bank
            bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {bank}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=input_method_keyboard())
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    @bot.callback_query_handler(func=lambda call: call.data.startswith("cat_"))
    def callback_category(call):
        user_id = call.from_user.id
        cat = call.data.split("_", 1)[1]
        if cat == "other":
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            sessions[user_id]["await_category"] = True
        else:
            sessions.setdefault(user_id, {})["category"] = cat
            bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ–ª–∏—á–∏–Ω—É –∫–µ—à–±—ç–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
            sessions[user_id]["stage"] = "await_cashback"
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞
    @bot.callback_query_handler(func=lambda call: call.data.startswith("resetbank_"))
    def callback_reset_bank(call):
        user_id = call.from_user.id
        bank = call.data.split("_", 1)[1]
        msg = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞ {bank}?"
        bot.send_message(user_id, msg, reply_markup=reset_confirm_keyboard(bank))
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    @bot.callback_query_handler(func=lambda call: call.data == "reset_all")
    def callback_reset_all(call):
        user_id = call.from_user.id
        bot.send_message(user_id, "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?", reply_markup=full_reset_confirm_keyboard())
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    @bot.callback_query_handler(func=lambda call: call.data == "reset_all_confirm")
    def callback_reset_all_confirm(call):
        user_id = call.from_user.id
        reset_all_data(user_id)
        bot.send_message(user_id, "‚úÖ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω.", reply_markup=main_menu_keyboard())
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–±—Ä–æ—Å–∞
    @bot.callback_query_handler(func=lambda call: call.data == "reset_cancel")
    def callback_reset_cancel(call):
        user_id = call.from_user.id
        bot.send_message(user_id, "–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    @bot.callback_query_handler(func=lambda call: call.data == "confirm_screenshot")
    def confirm_screenshot(call):
        user_id = call.from_user.id
        categories = sessions.get(user_id, {}).get("screenshot", [])
        bank = sessions.get(user_id, {}).get("bank", "–ù–µ –≤—ã–±—Ä–∞–Ω")
        
        if categories:
            for cat in categories:
                save_cashback(user_id, bank, cat.category, int(cat.amount), input_type="screenshot")
            
            response = "\n".join(f"{cat.category.capitalize()}: {int(cat.amount)}% üí∞" for cat in categories)
            bot.send_message(user_id, f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n{response}", reply_markup=main_menu_keyboard())
            sessions[user_id].pop("screenshot", None)
        else:
            bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=main_menu_keyboard())
        
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    @bot.callback_query_handler(func=lambda call: call.data == "cancel_screenshot")
    def cancel_screenshot(call):
        user_id = call.from_user.id
        sessions[user_id].pop("screenshot", None)
        bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.", reply_markup=input_method_keyboard())
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞
    @bot.callback_query_handler(func=lambda call: call.data.startswith("reset_") and call.data not in ["reset_all", "reset_all_confirm", "reset_cancel"])
    def callback_reset_bank_confirm(call):
        user_id = call.from_user.id
        bank = call.data.split("_", 1)[1]
        reset_data_for_bank(user_id, bank)
        bot.send_message(user_id, f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞ {bank} —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=main_menu_keyboard())
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë"
    @bot.callback_query_handler(func=lambda call: call.data == "add_more")
    def callback_add_more(call):
        user_id = call.from_user.id
        if user_id in sessions and "bank" in sessions[user_id]:
            markup = category_keyboard(user_id)
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        else:
            markup = bank_keyboard(user_id)
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=markup)
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    @bot.callback_query_handler(func=lambda call: call.data == "back_main")
    def callback_back_main(call):
        user_id = call.from_user.id
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
        bot.answer_callback_query(call.id) 