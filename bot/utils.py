import os
import tempfile
from datetime import datetime
from .config import CATEGORY_EMOJIS, DEFAULT_CATEGORY_EMOJI
from .database import get_summary as db_get_summary

def format_summary(user_id: int):
    rows = db_get_summary(user_id)
    summary = {}
    
    for bank, category, amount in rows:
        if category not in summary:
            summary[category] = []
        summary[category].append((bank, amount))
    
    text_lines = ["üèÜ –õ—É—á—à–∏–µ –∫—ç—à–±—ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:"]
    
    for cat, entries in summary.items():
        # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–∫–≤–æ–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç–º–æ–¥–∂–∏ —É–∂–µ –µ—Å—Ç—å
        if cat and not cat[0].isalpha():
            cat_label = cat.capitalize()
        elif cat in CATEGORY_EMOJIS:
            cat_label = f"{CATEGORY_EMOJIS[cat]} {cat.capitalize()}"
        else:
            cat_label = f"{DEFAULT_CATEGORY_EMOJI} {cat.capitalize()}"
        
        text_lines.append(f"\n {cat_label}")
        entries.sort(key=lambda x: x[1], reverse=True)
        medals = ["ü•á", "ü•à", "ü•â"]
        
        for idx, (bank, amount) in enumerate(entries[:3]):
            medal = medals[idx] if idx < len(medals) else ""
            text_lines.append(f"‚îî {medal} {bank}: {int(amount)}%")
    
    text_lines.append(f"\nüìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    return "\n".join(text_lines)

def save_temp_file(file_data):
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
    temp_file.write(file_data)
    temp_file.close()
    return temp_file.name

def delete_temp_file(file_path):
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    try:
        os.unlink(file_path)
    except Exception as e:
        pass 