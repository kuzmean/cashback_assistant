import re
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from bot.database.models import CashbackRecord
from config import Config
from bot.handlers import visualization
import logging
from tabulate import tabulate
from datetime import datetime

logger = logging.getLogger(__name__)

engine = create_engine(Config.DATABASE_URL)
Session = sessionmaker(bind=engine)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
BANK_SELECTION, CATEGORY_SELECTION, PERCENTAGE_INPUT, POST_SAVE_ACTIONS = range(4)
BANK_INPUT = 6  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞
CATEGORY_INPUT = 7  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞
RESET_CHOOSE_BANK, RESET_CONFIRM = range(4, 6)

async def get_user_banks(user_id: int) -> list:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = Session()
    try:
        banks = session.query(CashbackRecord.bank_name).filter(
            CashbackRecord.user_id == user_id,
            CashbackRecord.is_active == True
        ).distinct().all()
        user_banks = [bank[0] for bank in banks]
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–Ω–∫–∏
        all_banks = list(set(Config.BANKS + user_banks))
        all_banks.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        if "–î—Ä—É–≥–æ–π" in all_banks:
            all_banks.remove("–î—Ä—É–≥–æ–π")
            all_banks.append("–î—Ä—É–≥–æ–π")  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º "–î—Ä—É–≥–æ–π" –≤ –∫–æ–Ω–µ—Ü
        return all_banks
    finally:
        session.close()

async def get_user_categories(user_id: int) -> list:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = Session()
    try:
        categories = session.query(CashbackRecord.category).filter(
            CashbackRecord.user_id == user_id
        ).distinct().all()
        user_categories = [cat[0] for cat in categories]
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_categories = list(set(Config.CATEGORIES + user_categories))
        all_categories.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        if "–î—Ä—É–≥–æ–µ" in all_categories:
            all_categories.remove("–î—Ä—É–≥–æ–µ")
            all_categories.append("–î—Ä—É–≥–æ–µ")  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º "–î—Ä—É–≥–æ–µ" –≤ –∫–æ–Ω–µ—Ü
        return all_categories
    finally:
        session.close()

async def start_adding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ update –ø—Ä–∏—à–µ–ª –∏–∑ callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ message
    message = update.message if update.message else update.callback_query.message
    user_banks = await get_user_banks(update.effective_user.id)
    buttons = [[bank] for bank in user_banks]
    reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True)
    await message.reply_text(
        "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=reply_markup
    )
    return BANK_SELECTION

async def handle_bank_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_bank = update.message.text.strip()
    
    if selected_bank == "–î—Ä—É–≥–æ–π":
        await update.message.reply_text("üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")
        return BANK_INPUT
    else:
        context.user_data['current_bank'] = selected_bank
        return await show_category_selection(update.message, context)

async def show_category_selection(message, context: ContextTypes.DEFAULT_TYPE):
    user_categories = await get_user_categories(message.chat.id)
    keyboard = [
        [InlineKeyboardButton(cat, callback_data=f"cat_{cat}")]
        for cat in user_categories
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )
    return CATEGORY_SELECTION

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    category = query.data.replace("cat_", "")
    if category == "–î—Ä—É–≥–æ–µ":
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        return CATEGORY_INPUT
    else:
        context.user_data['current_category'] = category
        await query.edit_message_text(f"üíµ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±—ç–∫–∞ –¥–ª—è {category}:")
        return PERCENTAGE_INPUT

async def handle_percentage_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        percentage = float(update.message.text.replace('%', '').strip())
        data = {
            'bank': context.user_data['current_bank'],
            'category': context.user_data['current_category'],
            'cashback': percentage
        }

        await save_cashback_data(update.effective_user.id, data)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –±–∞–Ω–∫", callback_data="next_bank")],
            [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="command_reset")],
            [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É", callback_data="command_summary")]
        ])

        await update.message.reply_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=keyboard
        )
        return POST_SAVE_ACTIONS

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5")
        return PERCENTAGE_INPUT

async def handle_post_save_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "add_category":
        return await show_category_selection(query.message, context)
    elif query.data == "next_bank":
        context.user_data.pop('current_bank', None)
        new_update = Update(update.update_id + 1, message=query.message)
        return await start_adding(new_update, context)
    elif query.data == "command_summary":
        return await generate_summary(update, context)
    elif query.data == "command_reset":
        return await start_reset(update, context)

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def handle_command_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    command = query.data.replace("command_", "")

    if command == "add":
        return await start_adding(update, context)
    elif command == "reset":
        return await start_reset(update, context)
    elif command == "summary":
        return await generate_summary(update, context)
    elif command == "full_reset":
        return await handle_full_reset(update, context)

    return ConversationHandler.END

async def generate_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        message = update.message or update.callback_query.message

        session = Session()
        records = session.query(CashbackRecord).filter(
            CashbackRecord.user_id == user_id,
            CashbackRecord.is_active == True
        ).all()

        if not records:
            await message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            await message.reply_text(
                "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—ç—à–±—ç–∫–µ\n"
                "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞\n"
                "/summary - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∫—ç—à–±—ç–∫–∞–º\n"
                "/full_reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
                "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
            )
            return ConversationHandler.END

        categories = {}
        for record in records:
            if record.category not in categories:
                categories[record.category] = []
            categories[record.category].append((record.percentage, record.bank_name))

        sorted_categories = sorted(categories.keys())
        table = "<b>üèÜ –õ—É—á—à–∏–µ –∫—ç—à–±—ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n\n"

        for category in sorted_categories:
            sorted_banks = sorted(categories[category], key=lambda x: (-x[0], x[1]))

            emoji = get_category_emoji(category)
            table += f"<b>{emoji} {category}</b>\n"
            table += f"‚îî ü•á {sorted_banks[0][1]}: <b>{int(sorted_banks[0][0])}%</b>\n"

            for i, (percent, bank) in enumerate(sorted_banks[1:], 1):
                medal = "ü•à" if i == 1 else "ü•â" if i == 2 else "  ‚Ä¢"
                table += f"‚îî {medal} {bank}: {int(percent)}%\n"
            table += "\n"

        current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
        footer = f"\nüìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {current_date}"
        await message.reply_text(
            f"{table}{footer}",
            parse_mode="HTML"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        help_text = (
            "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—ç—à–±—ç–∫–µ\n"
            "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞\n"
            "/summary - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–≤–æ–¥–∫—É\n"
            "/full_reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )
        await message.reply_text(help_text)

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error generating summary: {e}")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")
        return ConversationHandler.END
    finally:
        session.close()

def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="command_add")],
        [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="command_full_reset")],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É", callback_data="command_summary")]
    ])

async def handle_all_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "add_category":
        return await handle_post_save_actions(update, context)
    elif data == "next_bank":
        return await handle_post_save_actions(update, context)
    elif data == "command_reset":
        return await start_reset(update, context)
    elif data == "command_summary":
        return await generate_summary(update, context)

    return ConversationHandler.END

async def start_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message if update.message else update.callback_query.message
    session = Session()
    try:
        banks = session.query(CashbackRecord.bank_name).filter(
            CashbackRecord.user_id == update.effective_user.id
        ).distinct().all()
        banks = [bank[0] for bank in banks]
        if banks:
            buttons = [[bank] for bank in banks]
            buttons.append(["üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –±–∞–Ω–∫–∏"])
            reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True)
            text = "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞:"
            await message.reply_text(text, reply_markup=reply_markup)
        else:
            await message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞")
            await message.reply_text(
                "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—ç—à–±—ç–∫–µ\n"
                "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞\n"
                "/summary - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∫—ç—à–±—ç–∫–∞–º\n"
                "/full_reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
                "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
            )
    finally:
        session.close()
    return ConversationHandler.END if not banks else RESET_CHOOSE_BANK

async def handle_reset_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_option = update.message.text.strip()
    
    if selected_option == "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –±–∞–Ω–∫–∏":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_reset_all"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
        ])
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• –±–∞–Ω–∫–æ–≤?",
            reply_markup=keyboard
        )
        context.user_data['reset_all_banks'] = True
    else:
        context.user_data['reset_bank'] = selected_option
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_reset"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
        ])
        await update.message.reply_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {selected_option}?",
            reply_markup=keyboard
        )
    return RESET_CONFIRM

async def handle_reset_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_reset":
        await query.edit_message_text("‚úÖ –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
        await query.message.reply_text(
            "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—ç—à–±—ç–∫–µ\n"
            "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞\n"
            "/reset_category - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "/summary - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∫—ç—à–±—ç–∫–∞–º\n"
            "/full_reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )
        context.user_data.pop('reset_bank', None)
        context.user_data.pop('reset_all_banks', None)
        context.user_data.pop('reset_category', None)
        return ConversationHandler.END
        
    if query.data in ["confirm_reset", "confirm_reset_all", "confirm_reset_cat", "confirm_reset_cat_all"]:
        if context.user_data.get('reset_all_banks'):
            session = Session()
            try:
                deleted = session.query(CashbackRecord).filter(
                    CashbackRecord.user_id == update.effective_user.id
                ).delete()
                session.commit()
                await query.edit_message_text("‚ôªÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã!")
                await query.message.reply_text(
                    "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                    "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—ç—à–±—ç–∫–µ\n"
                    "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞\n"
                    "/summary - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∫—ç—à–±—ç–∫–∞–º\n"
                    "/full_reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
                    "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
                )
            finally:
                session.close()
        elif query.data == "confirm_reset_cat_all":
            session = Session()
            try:
                deleted = session.query(CashbackRecord).filter(
                    CashbackRecord.user_id == update.effective_user.id
                ).delete()
                session.commit()
                await query.edit_message_text("‚ôªÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–±—Ä–æ—à–µ–Ω—ã!")
            finally:
                session.close()
        elif query.data == "confirm_reset_cat":
            category = context.user_data.get('reset_category')
            session = Session()
            try:
                session.query(CashbackRecord).filter(
                    CashbackRecord.user_id == update.effective_user.id,
                    CashbackRecord.category == category
                ).delete()
                session.commit()
                await query.edit_message_text(f"‚ôªÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} —Å–±—Ä–æ—à–µ–Ω—ã!")
            finally:
                session.close()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    context.user_data.pop('reset_bank', None)
    context.user_data.pop('reset_all_banks', None)
    return ConversationHandler.END

async def save_cashback_data(user_id: int, data: dict):
    session = Session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        record = session.query(CashbackRecord).filter(
            CashbackRecord.user_id == user_id,
            CashbackRecord.bank_name == data['bank'],
            CashbackRecord.category == data['category']
        ).first()

        if record:
            record.percentage = data['cashback']
        else:
            new_record = CashbackRecord(
                user_id=user_id,
                bank_name=data['bank'],
                category=data['category'],
                percentage=data['cashback']
            )
            session.add(new_record)
        
        session.commit()
    except Exception as e:
        session.rollback()
        raise e
    finally:
        session.close()

async def handle_full_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    try:
        deleted_count = session.query(CashbackRecord).filter(
            CashbackRecord.user_id == update.effective_user.id
        ).delete()
        session.commit()
        await update.message.reply_text("‚ôªÔ∏è –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!" if deleted_count else "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞")
        await update.message.reply_text(
            "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—ç—à–±—ç–∫–µ\n"
            "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞\n"
            "/summary - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∫—ç—à–±—ç–∫–∞–º\n"
            "/full_reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )
    except Exception as e:
        session.rollback()
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        session.close()
    return ConversationHandler.END

async def handle_custom_bank_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    custom_bank = update.message.text.strip()
    if len(custom_bank) > 30:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å 30 —Å–∏–º–≤–æ–ª–æ–≤)")
        return BANK_INPUT
    
    context.user_data['current_bank'] = custom_bank
    return await show_category_selection(update.message, context)

def get_category_emoji(category):
    emoji_map = {
        "–ê–ó–°": "‚õΩÔ∏è",
        "–ü—Ä–æ–¥—É–∫—Ç—ã": "üõí",
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã": "üçΩÔ∏è",
        "–ê–ø—Ç–µ–∫–∏": "üíä",
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "üöå",
        "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã": "üõçÔ∏è",
        "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üéÆ",
        "–î—Ä—É–≥–æ–µ": "üì¶"
    }
    return emoji_map.get(category, "üìã")

async def handle_custom_category_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    custom_category = update.message.text.strip()
    if len(custom_category) > 30:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å 30 —Å–∏–º–≤–æ–ª–æ–≤)")
        return CATEGORY_INPUT
    
    context.user_data['current_category'] = custom_category
    await update.message.reply_text(f"üíµ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±—ç–∫–∞ –¥–ª—è {custom_category}:")
    return PERCENTAGE_INPUT

async def start_reset_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message if update.message else update.callback_query.message
    session = Session()
    try:
        categories = session.query(CashbackRecord.category).filter(
            CashbackRecord.user_id == update.effective_user.id,
            CashbackRecord.is_active == True
        ).distinct().all()
        categories = [cat[0] for cat in categories]
        if categories:
            keyboard = [
                [InlineKeyboardButton(cat, callback_data=f"reset_cat_{cat}")]
                for cat in categories
            ]
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="reset_cat_all")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await message.reply_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–±—Ä–æ—Å–∞:",
                reply_markup=reply_markup
            )
        else:
            await message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞")
            await message.reply_text(
                "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—ç—à–±—ç–∫–µ\n"
                "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞\n"
                "/reset_category - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
                "/summary - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∫—ç—à–±—ç–∫–∞–º\n"
                "/full_reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
                "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
            )
    finally:
        session.close()
    return ConversationHandler.END if not categories else RESET_CATEGORY_SELECTION

async def handle_reset_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    category = query.data.replace("reset_cat_", "")
    if category == "all":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_reset_cat_all"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
        ])
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• –∫–∞—Ç–µ–≥–æ—Ä–∏–π?",
            reply_markup=keyboard
        )
    else:
        context.user_data['reset_category'] = category
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_reset_cat"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
        ])
        await query.edit_message_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}?",
            reply_markup=keyboard
        )
    return RESET_CONFIRM

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π