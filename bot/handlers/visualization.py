import matplotlib.pyplot as plt
import io
from sqlalchemy.orm import sessionmaker
from bot.database.models import CashbackRecord
from config import Config
from telegram import Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from sqlalchemy import create_engine
import matplotlib
from tabulate import tabulate
import logging

matplotlib.use('Agg')  # –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±—ç–∫–µ–Ω–¥–µ

engine = create_engine(Config.DATABASE_URL)
Session = sessionmaker(bind=engine)
logger = logging.getLogger(__name__)

async def generate_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        message = update.effective_message
        
        session = Session()
        records = session.query(CashbackRecord).filter(
            CashbackRecord.user_id == user_id,
            CashbackRecord.is_active == True
        ).all()

        if not records:
            await message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for record in records:
            if record.category not in categories:
                categories[record.category] = []
            categories[record.category].append((record.percentage, record.bank_name))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö
        sorted_categories = sorted(categories.keys())
        table_data = []
        
        for category in sorted_categories:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–Ω–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫—ç—à–±—ç–∫–∞
            sorted_banks = sorted(categories[category], key=lambda x: (-x[0], x[1]))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            table_data.append([
                category,
                f"{int(sorted_banks[0][0])}%",
                sorted_banks[0][1]
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏ –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            for percent, bank in sorted_banks[1:]:
                table_data.append([
                    "",  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    f"{int(percent)}%",
                    bank
                ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = tabulate(
            table_data,
            headers=["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö—ç—à–±—ç–∫", "–ë–∞–Ω–∫"],
            tablefmt="pretty",
            stralign="left",
            missingval=""
        )

        await message.reply_text(f"<pre>{table}</pre>", parse_mode="HTML")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ callback_data, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="next_bank")],
            [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="command_reset")]
        ])
        await message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Error generating summary: {e}")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")
    finally:
        session.close() 